props:
  - prop:
    common: &prop-id
      title: Retrieve the identifier
      description: Retrieves the identifier of the concept generated by Grakn.
      returns:
        - "`String`"
    javascript:
      <<: *prop-id
      prop: 'concept["id"];'
    python:
      <<: *prop-id
      prop: concept.id

methods:
  - method:
    common: &method-id
      title: Retrieve the identifier
      description: Retrieves the identifier of the concept generated by Grakn.
      method: concept.id();
      returns:
        - "`ConceptId`"
    java:
      <<: *method-id
  
  - method:
    common: &method-asRemote
      title: Get a Remote version of the concept.
      description: The remote version uses the given transaction to execute every method call.
      returns:
        - "`RemoteConcept`"
    java:
      <<: *method-asRemote
      method: concept.asRemote(tx);
    javascript:
      <<: *method-asRemote
      method: concept.asRemote(tx);
    python:
      <<: *method-asRemote
      method: concept.as_remote(tx)

  - method:
    common: &method-isType
      title: Check if concept is a Type (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isType
      method: concept.isType();
    javascript:
      <<: *method-isType
      method: concept.isType();
    python:
      <<: *method-isType
      method: concept.is_type()

  - method:
    common: &method-isThing
      title: Check if concept is a Thing (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isThing
      method: concept.isThing();
    javascript:
      <<: *method-isThing
      method: concept.isThing();
    python:
      <<: *method-isThing
      method: concept.is_thing()

  - method:
    common: &method-isEntityType
      title: Check if concept is an EntityType (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isEntityType
      method: concept.isEntityType();
    javascript:
      <<: *method-isEntityType
      method: concept.isEntityType();
    python:
      <<: *method-isEntityType
      method: concept.is_entity_type()

  - method:
    common: &method-isAttributeType
      title: Check if concept is an AttributeType (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    javascript:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    python:
      <<: *method-isAttributeType
      method: concept.is_attribute_type()

  - method:
    common: &method-isRelationType
      title: Check if concept is a RelationType (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isRelationType
      method: concept.isRelationType();
    javascript:
      <<: *method-isRelationType
      method: concept.isRelationType();
    python:
      <<: *method-isRelationType
      method: concept.is_relation_type()

  - method:
    common: &method-isEntity
      title: Check if concept is an Entity (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isEntity
      method: concept.isEntity();
    javascript:
      <<: *method-isEntity
      method: concept.isEntity();
    python:
      <<: *method-isEntity
      method: concept.is_entity()

  - method:
    common: &method-isAttribute
      title: Check if concept is an Attribute (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isAttribute
      method: concept.isAttribute();
    javascript:
      <<: *method-isAttribute
      method: concept.isAttribute();
    python:
      <<: *method-isAttribute
      method: concept.is_attribute()

  - method:
    common: &method-isRelation
      title: Check if concept is a Relation (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isRelation
      method: concept.isRelation();
    javascript:
      <<: *method-isRelation
      method: concept.isRelation();
    python:
      <<: *method-isRelation
      method: concept.is_relation()

  - method:
    common: &method-isRule
      title: Check if concept is a Rule (Local)
      returns:
        - "`boolean`"
    java:
      <<: *method-isRule
      method: concept.isRule();
    javascript:
      <<: *method-isRule
      method: concept.isRule();
    python:
      <<: *method-isRule
      method: concept.is_rule()

  - method:
    common: &method-asType
      title: Cast the concept as Type (Local)
      description: Casts the concept as Type so that we can call the Type methods on it.
      method: concept.asType();
      returns:
        - "[`Type`](../concept-api/type?tab=java) object"
    java:
      <<: *method-asType

  - method:
    common: &method-asThing
      title: Cast the concept as Thing (Local)
      description: Casts the concept as Thing so that we can call the Thing methods on it.
      method: concept.asThing();
      returns:
        - "[`Thing`](../concept-api/thing?tab=java) object"
    java:
      <<: *method-asThing

  - method:
    common: &method-asEntityType
      title: Cast the concept as EntityType (Local)
      description: Casts the concept as EntityType so that we can call the EntityType methods on it.
      method: concept.asEntityType();
      returns:
        - "[`EntityType`](../concept-api/type?tab=java#entitytype-methods) object"
    java:
      <<: *method-asEntityType

  - method:
    common: &method-asAttributeType
      title: Cast the concept as AttributeType (Local)
      description: Casts the concept as AttributeType so that we can call the AttributeType methods on it.
      method: concept.asAttributeType();
      returns:
        - "[`AttributeType`](../concept-api/type?tab=java#attributetype-methods) object"
    java:
      <<: *method-asAttributeType

  - method:
    common: &method-asRelationType
      title: Cast the concept as RelationType (Local)
      description: Casts the concept as RelationType so that we can call the RelationType methods on it.
      method: concept.asRelationType();
      returns:
        - "[`RelationType`](../concept-api/type?tab=java#relationtype-methods) object"
    java:
      <<: *method-asRelationType

  - method:
    common: &method-asEntity
      title: Cast the concept as Entity (Local)
      description: Casts the concept as Entity so that we can call the Entity methods on it.
      method: concept.asEntity();
      returns:
        - "`Entity` object"
    java:
      <<: *method-asEntity

  - method:
    common: &method-asAttribute
      title: Cast the concept as Attribute (Local)
      description: Casts the concept as Attribute so that we can call the Attribute methods on it.
      method: concept.asAttribute();
      returns:
        - "[`Attribute`](../concept-api/thing?tab=java#attribute-methods) object"
    java:
      <<: *method-asAttribute

  - method:
    common: &method-asRelation
      title: Cast the concept as Relation (Local)
      description: Casts the concept as Relation so that we can call the Relation methods on it.
      method: concept.asRelation();
      returns:
        - "[`Relation`](../concept-api/thing?tab=java#relation-methods) object"
    java:
      <<: *method-asRelation

  - method:
      common: &method-asRule
        title: Cast the concept as Rule (Local)
        description: Casts the concept as Relation so that we can call the Relation methods on it.
        method: concept.asRelation();
        returns:
          - "[`Rule`](../concept-api/rule?tab=java) object"
      java:
        <<: *method-asRelation

  - method:
    common: &method-delete
      title: Delete concept
      method: concept.delete();
      returns:
        - "`null`"
    java:
      <<: *method-delete
    javascript:
      <<: *method-delete
      method: await concept.delete();
      returns:
        - "`void`"
    python:
      <<: *method-delete
      method: concept.delete()
      returns:
        - "`None`"
        
  - method:
    common: &method-isDeleted
      title: Check if the concept has been deleted
      method: concept.isDeleted();
      returns:
        - "`boolean`"
    java:
      <<: *method-isDeleted
      method: concept.isDeleted()
    javascript:
      <<: *method-isDeleted
      method: await concept.isDeleted();
    python:
      <<: *method-isDeleted
      method: concept.is_deleted()
